package individual.leobert.retrofitext;

import java.lang.reflect.Constructor;
import java.nio.channels.CancelledKeyException;

import individual.leobert.retrofitext.core.Cancelable;
import retrofit2.Call;

/**
 * <p><b>Package:</b> individual.leobert.retrofitext </p>
 * <p><b>Project:</b> code </p>
 * <p><b>Classname:</b> RetrofitProxy </p>
 * <p><b>Description:</b> TODO </p>
 * Created by leobert on 2017/7/17.
 */

public class RetrofitProxy {

    /**
     * Get proxy class for given retrofitAPI, which will take care of Call's lifecycle
     *
     * @param retrofitAPI          api interface that defines the request
     * @param retrofitAPIImplement api implementation generated by retrofit(result of Retrofit.create())
     * @param <T>                  api interface that defines the request
     * @return proxy class that takes care of Call's lifecycle
     */
    public static <T> T getProxyInterface(Class<T> retrofitAPI, T retrofitAPIImplement) {
        if (retrofitAPIImplement == null) {
            throw new NullPointerException("retrofitAPIImplement can not be null");
        }

        String className = retrofitAPI.getName();
        if (className.startsWith("android.") || className.startsWith("java.")) {
            throwsProxyClassNotFoundException(className);
        }

        T proxyClassInstance = null;
        try {
            Class<?> bindingClass = Class.forName(className + "InvokeProxy");
            Constructor<T> constructor =
                    (Constructor<T>) bindingClass.getConstructor(retrofitAPI);
            proxyClassInstance = constructor.newInstance(retrofitAPIImplement);
        } catch (Exception e) {
            e.printStackTrace();
            throwsProxyClassNotFoundException(className);
        }
        return proxyClassInstance;
    }


    private static void throwsProxyClassNotFoundException(String className) {
        throw new IllegalArgumentException("Cannot find proxy class for " + className
                + ". Did you forget to add @ApiDef?");
    }
}
